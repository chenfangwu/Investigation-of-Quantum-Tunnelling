clc;%initialise
clear; 
N=200;
% Set up intial wavepacket;
x_0=0.2;
y_0=0.5;
C=10; 
sigma_squared=0.01; 
k_0=100; %wave vector k0=100,140, 150, 160
k=pi;
% Discretisation parameters
delta_x=1/200; 
delta_t=0.00001;

% Build a mesh for the values of the probability density function
a= linspace(0, 1, N);
%Use meshgrid to calculate the grid matrices for the x- and y-coordinates, %using same resolution and scales in x and y directions.
[x,y] = meshgrid(a);
z=x.*y;


%% Create a 2D potential cliff 
V=zeros(N,N);
%V(:, 120:140)=-6e4; %width 0.4 ,V=-8e4,-7e4,-6e4,-5e4
%V(:, 120:140)=-6e4; %width 0.1
V(:, 120:130)=-6e4; %width 0.05
%V(:, 120:122)=-6e4; %width 0.01
% Calculate psi
psi_stationary=C*exp(-(x-x_0).^2/sigma_squared).*exp(-(y-y_0).^2/sigma_squared); 
plane_wave = exp(1i*k_0*x);%+1i*k_0*y);
psi_z=psi_stationary.*plane_wave;
% % % Extract the real and imaginary parts of the wavefunction %
R_initial=real( psi_z); 
I_initial=imag( psi_z);
% % Initialise current real and imaginary parts of psi %
I_current=I_initial;
R_current=R_initial;
%
% % Initial run of Im(psi) to start off leapfrog process;
%
%
%[I_next] = imag_psi(N, I_current, R_current, delta_t, delta_x, V); %
% % % Do the leapfrog!!
%%
for time_step = 1:500
    T=round(delta_t.*time_step.*1E3 ,1)
% evaluate R at delta_t, 2*delta_t, 3*delta_t.......
%Time is incremented by t=t+delta_t/2 every call;
[R_next]=real_psi_2D(N, R_current, I_current, delta_t, delta_x, V);
R_current=R_next;
% evaluate I at (3/2)*delta_t, (5/2)*delta_t............ % Time is incremented by t=t+delta_t/2 every call;
[I_next] = imag_psi_2D(N, I_current, R_current, delta_t, delta_x, V);
% calculate psi*psi with R(t) and I(t+delta_t/2) and I(t-delta_t/2)
prob_density=R_current.^2+I_next.*I_current;
I_current=I_next;
% Visualise results with movie. Plot every 10 timesteps for speed

if rem(time_step, 10)== 0
    subplot(131)
    p=mesh(x,y, prob_density);
    ax1 = gca; % current axes
    ax1.XColor = 'k';
    ax1.YColor = 'k';
    ax1.ZColor = 'w';
    shading interp; %uniformity
            hold on
                %%%%%%%%%%%%Cliff
                c1 = [ 0 0 -100;0.6 0 -100;0.6 1 -100;0 1 -100;0 0 1;0.6 0 1;0.6 1 1;0 1 1];
              
                faces_matrix = [1 2 6 5;  2 3 7 6;3 4 8 7;4 1 5 8;1 2 3 4;5 6 7 8];
                h2 = patch('Vertices',c1,'Faces',faces_matrix,...
                'FaceVertexCData',hsv(8),'FaceColor',[0.69 0.188 0.376]);
                set(h2,'EdgeColor','none')
                view(3)
                
                
                %%%%%%%%%%%%Cliff width 0.2
                %c2 = [0.8 0 -100;1 0 -100;1 1 -100;0.8 1 -100;0.8 0 1;1 0 1;1 1 1;0.8 1 1];
                
                %%%%%%%%%%%%Cliff width 0.1
                %c2 = [0.7 0 -100;1 0 -100;1 1 -100;0.7 1 -100;0.7 0 1;1 0 1;1 1 1;0.7 1 1];
                
                %%%%%%%%%%%%Cliff width 0.05
                c2 = [0.65 0 -100;1 0 -100;1 1 -100;0.65 1 -100;0.65 0 1;1 0 1;1 1 1;0.65 1 1];
                faces_matrix = [1 2 6 5;  2 3 7 6;3 4 8 7;4 1 5 8;1 2 3 4;5 6 7 8];
                h2 = patch('Vertices',c2,'Faces',faces_matrix,...
                'FaceVertexCData',hsv(8),'FaceColor',[0.69 0.188 0.376]);
                set(h2,'EdgeColor','none')
                view(3)
                
axis([0 1 0 1 -100 150]); 
title('Side view','fontsize',15); 
    str = {'Cliff'};
               text(-0.6,0,140,str,'Interpreter','latex','fontsize',15)
    str = {'Time = ',num2str(T)};
               text(-0.6,0,100,str,'Interpreter','latex','fontsize',15)
               str = {' ms'};
               text(-0.35,0,90,str,'Interpreter','latex','fontsize',15)
xlabel('x','fontsize',13);
ylabel('y','fontsize',13);
xticks([0:0.5:1])
yticks([0:0.5:1])
zticks([-100:0:100])
%zlabel('\psi^*\psi','fontsize',15);    
        hold off
        view([0,0])
        colorbar
        drawnow;
        %axis off
        grid off; 
        box off;

        subplot(132)
    p=mesh(x,y, prob_density);
    alpha(p,0.1)
    ax1 = gca; % current axes
    ax1.XColor = 'k';
    ax1.YColor = 'k';
    ax1.ZColor = 'w';
    shading interp; %uniformity
            hold on
                
                %%%%%%%%%%%%Cliff
                c1 = [ 0 0 -100;0.6 0 -100;0.6 1 -100;0 1 -100;0 0 1;0.6 0 1;0.6 1 1;0 1 1];
              
                faces_matrix = [1 2 6 5;  2 3 7 6;3 4 8 7;4 1 5 8;1 2 3 4;5 6 7 8];
                h2 = patch('Vertices',c1,'Faces',faces_matrix,...
                'FaceVertexCData',hsv(8),'FaceColor',[0.69 0.188 0.376]);
                set(h2,'EdgeColor','none')
                view(3)
                
                
                %%%%%%%%%%%%Cliff width 0.2
                %c2 = [0.8 0 -100;1 0 -100;1 1 -100;0.8 1 -100;0.8 0 1;1 0 1;1 1 1;0.8 1 1];
                
                %%%%%%%%%%%%Cliff width 0.1
                %c2 = [0.7 0 -100;1 0 -100;1 1 -100;0.7 1 -100;0.7 0 1;1 0 1;1 1 1;0.7 1 1];
                
                %%%%%%%%%%%%Cliff width 0.05
                c2 = [0.65 0 -100;1 0 -100;1 1 -100;0.65 1 -100;0.65 0 1;1 0 1;1 1 1;0.65 1 1];
                faces_matrix = [1 2 6 5;  2 3 7 6;3 4 8 7;4 1 5 8;1 2 3 4;5 6 7 8];
                h2 = patch('Vertices',c2,'Faces',faces_matrix,...
                'FaceVertexCData',hsv(8),'FaceColor',[0.69 0.188 0.376]);
                set(h2,'EdgeColor','none')
                view(3)
                
axis([0 1 0 1 -100 150]); 
title('Isometric view','fontsize',15); 
xlabel('x','fontsize',13);
ylabel('y','fontsize',13);
xticks([0:0.5:1])
yticks([0:0.5:1])
zticks([-100:0:100])
%zlabel('\psi^*\psi','fontsize',15);    
        hold off
        view([-45,40])
        drawnow;
        %axis off
        grid off; 
        box off;
       %light('Position',[0.7 0 30],'Style','local')
       %light;

        subplot(133)
    p=mesh(x,y, prob_density);
    shading interp; %uniformity
            hold on
                 %%%%%%%%%%%%Cliff
                c1 = [ 0 0 -100;0.6 0 -100;0.6 1 -100;0 1 -100;0 0 1;0.6 0 1;0.6 1 1;0 1 1];
              
                faces_matrix = [1 2 6 5;  2 3 7 6;3 4 8 7;4 1 5 8;1 2 3 4;5 6 7 8];
                h2 = patch('Vertices',c1,'Faces',faces_matrix,...
                'FaceVertexCData',hsv(8),'FaceColor',[0.69 0.188 0.376]);
                set(h2,'EdgeColor','none')
                view(3)
                
                
                %%%%%%%%%%%%Cliff width 0.2
                %c2 = [0.8 0 -100;1 0 -100;1 1 -100;0.8 1 -100;0.8 0 1;1 0 1;1 1 1;0.8 1 1];
                
                %%%%%%%%%%%%Cliff width 0.1
                %c2 = [0.7 0 -100;1 0 -100;1 1 -100;0.7 1 -100;0.7 0 1;1 0 1;1 1 1;0.7 1 1];
                
                %%%%%%%%%%%%Cliff width 0.05
                c2 = [0.65 0 -100;1 0 -100;1 1 -100;0.65 1 -100;0.65 0 1;1 0 1;1 1 1;0.65 1 1];
                faces_matrix = [1 2 6 5;  2 3 7 6;3 4 8 7;4 1 5 8;1 2 3 4;5 6 7 8];
                h2 = patch('Vertices',c2,'Faces',faces_matrix,...
                'FaceVertexCData',hsv(8),'FaceColor',[0.69 0.188 0.376]);
                set(h2,'EdgeColor','none')
                view(3)
                
axis([0 1 0 1 -100 100]); 
title('Top view','fontsize',15); 
xlabel('x','fontsize',13);
ylabel('y','fontsize',13);
xticks([0:0.5:1])
yticks([0:0.5:1])
zticks([-100:0:100])
%zlabel('\psi^*\psi','fontsize',15);    
        hold off  
        view([0,90])
        colormap(flipud(hot)) 
        drawnow;
        %axis off
        grid off; 
        box off;
end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% % Calculate the imaginary part of the wavefunction at time % t=t+delta_t/2,, t + 3*delta_t/2 etc
% % given the value at time t. Vectorise for speed.
function [I_next]= imag_psi_2D(N, I_current, R_current, delta_t, delta_x, V) 
I_next= zeros(N,N);
s=delta_t/(2*delta_x^2);
x=2:N-1; 
y=2:N-1;
% Calculate the imaginary part of the wavefunction at time t=t+delta_t, % given the value at time t.
I_next(x,y)=I_current(x,y) +s*(R_current(x+1,y)-2*R_current(x,y)+R_current(x- 1,y)+R_current(x,y+1)-2*R_current(x,y)+R_current(x,y-1))...
-delta_t*V(x,y).*R_current(x,y);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
% % Calculate the real part of the wavefunction at time t=t+delta_t,
% t+2*delta_t etc....
% % given the value at time t. Vectorise for speed.
function [R_next]= real_psi_2D(N, R_current, I_current, delta_t, delta_x, V) 
R_next= zeros(N,N);
s=delta_t/(2*delta_x^2);
x=2:N-1; 
y=2:N-1;
% Calculate the real part of the wavefunction at time t=t+delta_t, % given the value at time t.
R_next(x,y)=R_current(x,y) - s*(I_current(x+1,y)-2*I_current(x,y)+I_current(x- 1,y)+I_current(x,y+1)-2*I_current(x,y)+I_current(x,y-1))...
+delta_t*V(x,y).*I_current(x,y);
end
